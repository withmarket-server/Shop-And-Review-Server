pipeline {
    agent any

    environment {
        QUERY_ECR_REPO = "326991552997.dkr.ecr.ap-northeast-2.amazonaws.com/withmarket-shop-server-query"
        COMMAND_ECR_REPO = "326991552997.dkr.ecr.ap-northeast-2.amazonaws.com/withmarket-shop-server-command"
        KAFKA_CONSUMER_ECR_REPO = "326991552997.dkr.ecr.ap-northeast-2.amazonaws.com/withmarket-shop-server-kafka-consumer"

        COMMAND_APP_NAME = "withmarket-shop-review-server-command"
        QUERY_APP_NAME = "withmarket-shop-review-server-query"
        KAFKA_LISTENER_APP_NAME = "withmarket-shop-review-server-kafka-listener"

        ECS_CLUSTER_NAME = "withmarket-main-cluster"

        AWS_CREDENTIALS = "jenkins_deploy_user_credentials"
    }

    stages {
        stage("========== Test the project ==========") {
            steps {
                dir("${env.WORKSPACE}") {
                    sh 'chmod 755 ./gradlew'
                    sh './gradlew test'
                }
            }

            post {
                success {
                    echo 'The Test stage is done successfully.'
                }

                failure {
                    echo 'The Test stage is fail.'
                }
            }
        }

        stage("========== Build the command application ==========") {
            steps {
                dir("${env.WORKSPACE}") {
                    sh 'cd adapter/router-command'
                    sh 'chmod 755 ./gradlew'
                    sh './gradlew build'
                }
            }

            post {
                success {
                    echo 'The Building command application is done successfully.'
                }

                failure {
                    echo 'The Building command application is failed.'
                }
            }
        }

        stage("========== Build the query application ==========") {
            steps {
                dir("${env.WORKSPACE}") {
                    sh 'cd adapter/router-query'
                    sh 'chmod 755 ./gradlew'
                    sh './gradlew build'
                }
            }

            post {
                success {
                    echo 'The Building query application is done successfully.'
                }

                failure {
                    echo 'The Building query application is failed.'
                }
            }
        }

        stage("========== Build the listener application ==========") {
            steps {
                dir("${env.WORKSPACE}") {
                    sh 'cd adapter/kafka-consumer'
                    sh 'chmod 755 ./gradlew'
                    sh './gradlew build'
                }
            }

            post {
                success {
                    echo 'The Building consumer application is done successfully.'
                }

                failure {
                    echo 'The Building consumer application is failed.'
                }
            }
        }

        stage("========== Build docker image of command application ==========") {
            steps {
                dir("${env.WORKSPACE}") {
                    sh 'cd adapter/router-command && docker build -t ${COMMAND_APP_NAME} .'
                    sh 'docker tag ${COMMAND_APP_NAME}:latest ${COMMAND_ECR_REPO}:latest'
                }
            }

            post {
                success {
                    echo 'The docker building command application is done successfully.'
                }

                failure {
                    echo 'The docker building command application is failed.'
                }
            }
        }
    }

    post {
        success {
            slackSend(
                channel: "#server-build-history",
                color: "good",
                message: "[Successful] Job:${env.JOB_NAME}, Build num:#${env.BUILD_NUMBER} (<${env.RUN_DISPLAY_URL}|open job detail>)"
            )
        }

        failure {
            slackSend(
                channel: "#server-build-history",
                color: "danger",
                message: "[Failed] Job:${env.JOB_NAME}, Build num:#${env.BUILD_NUMBER} @channel (<${env.RUN_DISPLAY_URL}|open job detail>)"
            )
        }
    }
}