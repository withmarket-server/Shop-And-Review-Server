pipeline {
    agent any

    environment {
        QUERY_ECR_REPO = "326991552997.dkr.ecr.ap-northeast-2.amazonaws.com/withmarket-shop-server-query"
        COMMAND_ECR_REPO = "326991552997.dkr.ecr.ap-northeast-2.amazonaws.com/withmarket-shop-server-command"
        KAFKA_CONSUMER_ECR_REPO = "326991552997.dkr.ecr.ap-northeast-2.amazonaws.com/withmarket-shop-server-kafka-consumer"

        COMMAND_APP_NAME = "withmarket-shop-review-server-command"
        QUERY_APP_NAME = "withmarket-shop-review-server-query"
        KAFKA_CONSUMER_APP_NAME = "withmarket-shop-review-server-kafka-consumer"

        ECS_CLUSTER_NAME = "withmarket-main-cluster"

        COMMAND_SERVICE_NAME = "shop-command"
        QUERY_SERVICE_NAME = "shop-query"

        AWS_CREDENTIALS = "jenkins_deploy_user_credentials"
    }

    stages {
        stage("Test the project") {
            steps {
                dir("${env.WORKSPACE}") {
                    sh 'chmod 755 ./gradlew'
                    sh './gradlew test'
                }
            }

            post {
                success {
                    echo 'The Test stage is done successfully.'
                }

                failure {
                    echo 'The Test stage is fail.'
                }
            }
        }

        stage("Build the command application") {
            steps {
                dir("${env.WORKSPACE}") {
                    sh 'cd adapter/router-command'
                    sh 'chmod 755 ./gradlew'
                    sh './gradlew build'
                }
            }

            post {
                success {
                    echo 'The Building command application is done successfully.'
                }

                failure {
                    echo 'The Building command application is failed.'
                }
            }
        }

        stage("Build the query application") {
            steps {
                dir("${env.WORKSPACE}") {
                    sh 'cd adapter/router-query'
                    sh 'chmod 755 ./gradlew'
                    sh './gradlew build'
                }
            }

            post {
                success {
                    echo 'The Building query application is done successfully.'
                }

                failure {
                    echo 'The Building query application is failed.'
                }
            }
        }

        stage("Build the listener application") {
            steps {
                dir("${env.WORKSPACE}") {
                    sh 'cd adapter/kafka-consumer'
                    sh 'chmod 755 ./gradlew'
                    sh './gradlew build'
                }
            }

            post {
                success {
                    echo 'The Building consumer application is done successfully.'
                }

                failure {
                    echo 'The Building consumer application is failed.'
                }
            }
        }

        stage("Build docker image of command application") {
            steps {
                dir("${env.WORKSPACE}") {
                    sh 'cd adapter/router-command && docker build -t ${COMMAND_APP_NAME} .'
                    sh 'docker tag ${COMMAND_APP_NAME}:latest ${COMMAND_ECR_REPO}:latest'
                }
            }

            post {
                success {
                    echo 'The docker building command application is done successfully.'
                }

                failure {
                    echo 'The docker building command application is failed.'
                }
            }
        }

        stage("Build docker image of query application") {
            steps {
                dir("${env.WORKSPACE}") {
                    sh 'cd adapter/router-query && docker build -t ${QUERY_APP_NAME} .'
                    sh 'docker tag ${QUERY_APP_NAME}:latest ${QUERY_ECR_REPO}:latest'
                }
            }

            post {
                success {
                    echo 'The docker building query application is done successfully.'
                }

                failure {
                    echo 'The docker building query application is failed.'
                }
            }
        }

        stage("Build docker image of kafka consumer application") {
            steps {
                dir("${env.WORKSPACE}") {
                    sh 'cd adapter/kafka-consumer && docker build -t ${KAFKA_CONSUMER_APP_NAME} .'
                    sh 'docker tag ${KAFKA_CONSUMER_APP_NAME}:latest ${KAFKA_CONSUMER_ECR_REPO}:latest'
                }
            }

            post {
                success {
                    echo 'The docker building kafka consumer application is done successfully.'
                }

                failure {
                    echo 'The docker building kafka consumer application is failed.'
                }
            }
        }

        stage("ECR Upload(command application)") {
            steps {
                script {
                    try {
                        withAWS(credentials: "${AWS_CREDENTIALS}", role: 'arn:aws:iam::326991552997:role/jenkins_deploy_role', roleAccount: "326991552997", externalId: "18k7102dy@gmail.com") {
                            sh "aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${COMMAND_ECR_REPO}"
                            sh 'docker push ${COMMAND_ECR_REPO}:latest'
                        }
                    }catch(error) {
                        print(error)
                        currentBuild.result = 'FAILURE'
                    }
                }
            }

            post {
                success {
                    echo "The ECR Upload(command) stage is done successfully."
                }
                failure {
                    echo "The ECR Upload(command) stage is fail."
                }
            }
        }

        stage("ECR Upload(query application)") {
            steps {
                script {
                    try {
                        sh "aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${QUERY_ECR_REPO}"
                        sh 'docker push ${QUERY_ECR_REPO}:latest'
                    }catch(error) {
                        print(error)
                        currentBuild.result = 'FAILURE'
                    }
                }
            }

            post {
                success {
                    echo "The ECR Upload(query) stage is done successfully."
                }
                failure {
                    echo "The ECR Upload(query) stage is fail."
                }
            }
        }

        stage("ECR Upload(kafka consumer application)") {
            steps {
                script {
                    try {
                        sh "aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${KAFKA_CONSUMER_ECR_REPO}"
                        sh 'docker push ${KAFKA_CONSUMER_ECR_REPO}:latest'
                    }catch(error) {
                        print(error)
                        currentBuild.result = 'FAILURE'
                    }
                }
            }

            post {
                success {
                    echo "The ECR Upload(kafka consumer) stage is done successfully."
                }
                failure {
                    echo "The ECR Upload(kafka consumer) stage is fail."
                }
            }
        }

        stage("Deploy command app to fargate") {
            steps {
                script {
                    try {
                        withAWS(credentials: "${AWS_CREDENTIALS}", role: 'arn:aws:iam::326991552997:role/jenkins_deploy_role', roleAccount: "326991552997", externalId: "18k7102dy@gmail.com") {
                            sh "aws ecs update-service --region ap-northeast-2 --cluster ${ECS_CLUSTER_NAME} --service ${COMMAND_SERVICE_NAME} --force-new-deployment"
                        }
                    }catch(error) {
                        print(error)
                        echo 'Remove Deploy Files'
                        sh "sudo rm -rf /var/lib/jenkins/workspace/${env.JOB_NAME}/*"
                        currentBuild.result = 'FAILURE'
                    }
                }
            }

            post {
                success {
                    echo "The command app Fargate deploy stage is done successfully."
                }
                failure {
                    echo "The command app Fargate deploy stage is fail."
                }
            }
        }

        stage("Deploy query app to fargate") {
            steps {
                script {
                    try {
                        withAWS(credentials: "${AWS_CREDENTIALS}", role: 'arn:aws:iam::326991552997:role/jenkins_deploy_role', roleAccount: "326991552997", externalId: "18k7102dy@gmail.com") {
                            sh "aws ecs update-service --region ap-northeast-2 --cluster ${ECS_CLUSTER_NAME} --service ${QUERY_SERVICE_NAME} --force-new-deployment"
                        }
                    }catch(error) {
                        print(error)
                        echo 'Remove Deploy Files'
                        sh "sudo rm -rf /var/lib/jenkins/workspace/${env.JOB_NAME}/*"
                        currentBuild.result = 'FAILURE'
                    }
                }
            }

            post {
                success {
                    echo "The query app Fargate deploy stage is done successfully.."
                }
                failure {
                    echo "The query app Fargate deploy stage is fail.."
                }
            }
        }
    }

    post {
        success {
            slackSend(
                channel: "#server-build-history",
                color: "good",
                message: "[Successful] Job:${env.JOB_NAME}, Build num:#${env.BUILD_NUMBER} (<${env.RUN_DISPLAY_URL}|open job detail>)"
            )
        }

        failure {
            slackSend(
                channel: "#server-build-history",
                color: "danger",
                message: "[Failed] Job:${env.JOB_NAME}, Build num:#${env.BUILD_NUMBER} @channel (<${env.RUN_DISPLAY_URL}|open job detail>)"
            )
        }
    }
}